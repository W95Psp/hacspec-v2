---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: attributes
    manifest: attributes/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Attributes.Int_model.fst" = '''
module Attributes.Int_model
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

unfold type t_Int = int

unfold let add x y = x + y

unfold instance impl: Core.Ops.Arith.t_Sub t_Int t_Int =
  {
    f_Output = t_Int;
    f_sub_pre = (fun (self: t_Int) (other: t_Int) -> true);
    f_sub_post = (fun (self: t_Int) (other: t_Int) (out: t_Int) -> true);
    f_sub = fun (self: t_Int) (other: t_Int) -> self + other
  }
'''
"Attributes.Newtype_pattern.fst" = '''
module Attributes.Newtype_pattern
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let v_MAX: usize = sz 10

type t_SafeIndex = { f_i:f_i: usize{f_i <. v_MAX} }

let impl__SafeIndex__as_usize (self: t_SafeIndex) : usize = self.f_i

let impl__SafeIndex__new (i: usize) : Core.Option.t_Option t_SafeIndex =
  if i <. v_MAX
  then Core.Option.Option_Some ({ f_i = i } <: t_SafeIndex) <: Core.Option.t_Option t_SafeIndex
  else Core.Option.Option_None <: Core.Option.t_Option t_SafeIndex

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_1 (#v_T: Type0) : Core.Ops.Index.t_Index #(t_Array v_T (sz 10)) #t_SafeIndex =
  {
    f_Output = v_T;
    f_index_pre = (fun (self: t_Array v_T (sz 10)) (index: t_SafeIndex) -> true);
    f_index_post = (fun (self: t_Array v_T (sz 10)) (index: t_SafeIndex) (out: v_T) -> true);
    f_index = fun (self: t_Array v_T (sz 10)) (index: t_SafeIndex) -> self.[ index.f_i ]
  }
'''
"Attributes.Refined_arithmetic.fst" = '''
module Attributes.Refined_arithmetic
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_Foo = | Foo : u8 -> t_Foo

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: Core.Ops.Arith.t_Add #t_Foo #t_Foo =
  {
    f_Output = t_Foo;
    f_add_pre = (fun (self: t_Foo) (rhs: t_Foo) -> self._0 <. (255uy -! rhs._0 <: u8));
    f_add_post = (fun (self: t_Foo) (rhs: t_Foo) (out: t_Foo) -> true);
    f_add = fun (self: t_Foo) (rhs: t_Foo) -> Foo (self._0 +! rhs._0) <: t_Foo
  }

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_1: Core.Ops.Arith.t_Mul #t_Foo #t_Foo =
  {
    f_Output = t_Foo;
    f_mul_pre
    =
    (fun (self: t_Foo) (rhs: t_Foo) -> rhs._0 =. 0uy || self._0 <. (255uy /! rhs._0 <: u8));
    f_mul_post = (fun (self: t_Foo) (rhs: t_Foo) (out: t_Foo) -> true);
    f_mul = fun (self: t_Foo) (rhs: t_Foo) -> Foo (self._0 *! rhs._0) <: t_Foo
  }
'''
"Attributes.Refined_indexes.fst" = '''
module Attributes.Refined_indexes
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let v_MAX: usize = sz 10

type t_MyArray = | MyArray : t_Array u8 (sz 10) -> t_MyArray

/// Triple dash comment
(** Multiline double star comment Maecenas blandit accumsan feugiat.
    Done vitae ullamcorper est.
    Curabitur id dui eget sem viverra interdum. *)
let mutation_example
      (use_generic_update_at: t_MyArray)
      (use_specialized_update_at: t_Slice u8)
      (specialized_as_well: Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)
    : (t_MyArray & t_Slice u8 & Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global) =
  let use_generic_update_at:t_MyArray =
    Rust_primitives.Hax.update_at use_generic_update_at (sz 2) 0uy
  in
  let use_specialized_update_at:t_Slice u8 =
    Rust_primitives.Hax.Monomorphized_update_at.update_at_usize use_specialized_update_at (sz 2) 0uy
  in
  let specialized_as_well:Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global =
    Rust_primitives.Hax.Monomorphized_update_at.update_at_usize specialized_as_well (sz 2) 0uy
  in
  use_generic_update_at, use_specialized_update_at, specialized_as_well
  <:
  (t_MyArray & t_Slice u8 & Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: Core.Ops.Index.t_Index #t_MyArray #usize =
  {
    f_Output = u8;
    f_index_pre = (fun (self: t_MyArray) (index: usize) -> index <. v_MAX);
    f_index_post = (fun (self: t_MyArray) (index: usize) (out: u8) -> true);
    f_index = fun (self: t_MyArray) (index: usize) -> self.[ index ]
  }
'''
"Attributes.Refinement_types.fst" = '''
module Attributes.Refinement_types
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let t_BoundedU8 (v_MIN v_MAX: u8) = x: u8{x >=. v_MIN && x <=. v_MAX}

/// Example of a specific constraint on a value
let t_CompressionFactor = x: u8{x =. 4uy || x =. 5uy || x =. 10uy || x =. 11uy}

/// Even `u8` numbers. Constructing pub Even values triggers static
/// proofs in the extraction.
let t_Even = x: u8{(x %! 2uy <: u8) =. 0uy}

/// A field element
let t_FieldElement = x: u16{x <=. 2347us}

/// A modular mutliplicative inverse
let t_ModInverse (v_MOD: u32) =
  n:
  u32
    { (((cast (n <: u32) <: u128) *! (cast (v_MOD <: u32) <: u128) <: u128) %!
        (cast (v_MOD <: u32) <: u128)
        <:
        u128) =.
      pub_u128 1 }

/// A string that contains no space.
let t_NoE =
  x:
  Alloc.String.t_String
    { let _, out:(Core.Str.Iter.t_Chars & bool) =
        Core.Iter.Traits.Iterator.f_any #Core.Str.Iter.t_Chars
          (Core.Str.impl__str__chars (Core.Ops.Deref.f_deref #Alloc.String.t_String x <: string)
            <:
            Core.Str.Iter.t_Chars)
          (fun ch ->
              let ch:char = ch in
              ch =. ' ' <: bool)
      in
      ~.out }

let bounded_u8 (x: t_BoundedU8 12uy 15uy) (y: t_BoundedU8 10uy 11uy) : t_BoundedU8 1uy 23uy =
  (Hax_lib.f_get #(t_BoundedU8 12uy 15uy) x <: u8) +!
  (Hax_lib.f_get #(t_BoundedU8 10uy 11uy) y <: u8)
  <:
  t_BoundedU8 1uy 23uy

let double (x: u8) : Prims.Pure t_Even (requires x <. 127uy) (fun _ -> Prims.l_True) =
  x +! x <: t_Even

let double_refine (x: u8) : Prims.Pure t_Even (requires x <. 127uy) (fun _ -> Prims.l_True) =
  x +! x <: t_Even
'''
"Attributes.fst" = '''
module Attributes
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let add3_lemma (x: u32)
    : Lemma Prims.l_True
      (ensures
        x <=. 10ul || x >=. (u32_max /! 3ul <: u32) || (add3 x x x <: u32) =. (x *! 3ul <: u32)) =
  ()

let inlined_code__V: u8 = 12uy

let u32_max: u32 = 90000ul

unfold let some_function _ = "hello from F*"

/// A doc comment on `add3`
///another doc comment on add3
let add3 (x y z: u32)
    : Prims.Pure u32
      (requires x >. 10ul && y >. 10ul && z >. 10ul && ((x +! y <: u32) +! z <: u32) <. u32_max)
      (ensures
        fun result ->
          let result:u32 = result in
          Hax_lib.implies true
            (fun temp_0_ ->
                let _:Prims.unit = temp_0_ in
                result >. 32ul <: bool)) = (x +! y <: u32) +! z

type t_Foo = {
  f_x:u32;
  f_y:f_y: u32{f_y >. 3ul};
  f_z:f_z: u32{((f_y +! f_x <: u32) +! f_z <: u32) >. 3ul}
}

let before_inlined_code = "example before"

let inlined_code (foo: t_Foo) : Prims.unit =
  let vv_a:i32 = 13l in
  let _:Prims.unit =
    let x = foo.f_x in
    let { f_y = y } = foo in
    add3 ((fun _ -> 3ul) foo) vv_a inlined_code__V y
  in
  ()

let inlined_code_after = "example after"
'''
